{"version":3,"sources":["logo.svg","components/text-input.components.js","App.js","reportWebVitals.js","index.js"],"names":["TextInput","placeHolder","handleChange","type","placeholder","onChange","App","state","sats","createInvoiceHeader","lnInvoice","lnUrlHeader","amount","this","getBalances","fetch","method","headers","Accept","Authorization","process","then","response","json","d","setState","data","balance","BTC","catch","err","console","error","options","body","JSON","stringify","order_id","ttl","description","customer_email","currency","min_amt","max_amt","callback_url","lightning_invoice","payreq","window","open","uri","className","src","logo","alt","style","alignItems","margin","onClick","event","target","value","createInvoice","lnUrlWithdrawal","wordWrap","marginTop","marginLeft","marginRight","color","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.116f89ba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './text-input.styles.css';\n\nexport const TextInput = ({ placeHolder, handleChange }) => {\n  return (\n    <input type='number' placeholder={placeHolder} onChange={handleChange} />\n  );\n};\n","import { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextInput } from './components/text-input.components';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      sats: '',\n      createInvoiceHeader: '',\n      lnInvoice: '',\n      lnUrlHeader: '',\n      amount: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getBalances();\n  }\n\n  getBalances() {\n    const options = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        Authorization: process.env.REACT_APP_READ_ONLY_KEY,\n      },\n    };\n    fetch('https://api.opennode.com/v1/account/balance', options)\n      .then((response) => response.json())\n      .then((d) => this.setState({ sats: d.data.balance.BTC }))\n      .catch((err) => console.error(err));\n  }\n\n  createInvoice() {\n    const options = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: process.env.REACT_APP_INVOICES_KEY,\n      },\n      body: JSON.stringify({\n        order_id: \"Merchant's internal order ID\",\n        ttl: 1440,\n        description: 'Test Invoice',\n        amount: this.state.amount,\n        customer_email: 'cworthen777@hotmail.com',\n        currency: 'BTC',\n        min_amt: this.state.amount,\n        max_amt: this.state.amount,\n        callback_url: 'https://example.com/webhook/opennode',\n      }),\n    };\n\n    fetch('https://api.opennode.com/v1/charges', options)\n      .then((response) => response.json())\n      .then((response) => {\n        if (this.state.amount > 0) {\n          return (\n            this.setState({\n              lnInvoice: response.data.lightning_invoice.payreq,\n            }),\n            this.setState({\n              createInvoiceHeader: `Thanks for donating ${this.state.amount} sat(s)`,\n            })\n          );\n        }\n      })\n      .catch((err) => console.error(err));\n  }\n\n  lnUrlWithdrawal() {\n    const options = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: process.env.REACT_APP_WITHDRAW_KEY,\n      },\n      body: JSON.stringify({\n        order_id: \"Merchant's internal order ID\",\n        ttl: 1440,\n        description: 'Thanks for doxxing yourself by draining my faucet ^.^',\n        customer_email: 'cworthen777@hotmail.com',\n        currency: 'BTC',\n        min_amt: 1,\n        max_amt: 1,\n        callback_url: 'https://example.com/webhook/opennode',\n      }),\n    };\n\n    fetch('https://api.opennode.com/v2/lnurl-withdrawal', options)\n      .then((response) => response.json())\n      .then((response) => window.open(`${response.data.uri}`, '_self'))\n      .catch((err) => console.error(err));\n\n    this.setState({ lnUrlHeader: 'Claim' });\n  }\n\n  render() {\n    const { sats, createInvoiceHeader, lnInvoice } = this.state;\n\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n\n          <div style={{ alignItems: 'center', margin: 20 }}>\n            <h3>{'LN Faucet contains ' + sats + ' sats'}</h3>\n            <div>\n              <button onClick={() => this.getBalances()}>Refresh Balance</button>\n            </div>\n\n            <div>\n              <TextInput\n                placeHolder='Amount (sats)'\n                handleChange={(event) => this.setState({ amount: event.target.value })}\n              />\n            </div>\n\n            <div>\n              <button onClick={() => this.createInvoice()}>Donate sats to faucet</button>\n            </div>\n\n            <div>\n              <button onClick={() => this.lnUrlWithdrawal()}>Claim 1 sat!</button>\n            </div>\n\n            <div\n              style={{\n                wordWrap: 'break-word',\n                marginTop: 25,\n                marginLeft: 25,\n                marginRight: 25,\n                color: 'white',\n              }}\n            >\n              {createInvoiceHeader}\n            </div>\n\n            <div\n              style={{\n                wordWrap: 'break-word',\n                marginTop: 25,\n                marginLeft: 25,\n                marginRight: 25,\n                color: 'white',\n              }}\n            >\n              {lnInvoice}\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}